{"version":3,"file":"/packages/accounts-admin-ui-bootstrap-3.js","sources":["accounts-admin-ui-bootstrap-3/libs/user_query.js","accounts-admin-ui-bootstrap-3/server/startup.js","accounts-admin-ui-bootstrap-3/server/publish.js","accounts-admin-ui-bootstrap-3/server/methods.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8C;AACA,kD;AACA,4C;AACA,mC;;AAEA,4C;AACA,qB;;AAEA,e;AACA,uD;AACA,6B;AACA,S;AACA,sD;AACA,uD;AACA,I;AACA,6C;AACA,S;AACA,wE;AACA,E;AACA,c;AACA,E;;;;;;;;;;;;;;;;;;ACpBA,2B;AACA,4C;AACA,uD;AACA,4B;AACA,E;AACA,G;;;;;;;;;;;;;;;;;;ACLA,oC;AACA,8B;AACA,G;;AAEA,kD;AACA,+C;AACA,G;;;;;;;;;;;;;;;;;;ACNA,gB;AACA,+B;AACA,2B;AACA,oD;AACA,4E;;AAEA,yB;AACA,8D;AACA,E;AACA,oB;AACA,8B;AACA,G;;AAEA,sC;AACA,2B;AACA,oD;AACA,4E;;AAEA,yB;AACA,8D;;AAEA,wB;AACA,mD;AACA,oE;;AAEA,iC;AACA,uC;AACA,uE;;AAEA,6B;AACA,sC;AACA,G;;AAEA,yC;AACA,2B;AACA,oD;AACA,4E;;AAEA,yB;AACA,8D;;AAEA,wB;AACA,mD;AACA,oE;;AAEA,iC;AACA,wC;AACA,yE;;AAEA,2C;AACA,G;;AAEA,0B;AACA,2B;AACA,oD;AACA,4E;;AAEA,yB;AACA,mD;AACA,oE;;AAEA,yB;AACA,G;;AAEA,6B;AACA,2B;AACA,oD;AACA,4E;;AAEA,6B;AACA,mD;AACA,oE;;AAEA,uB;AACA,2D;;AAEA,+D;AACA,mC;AACA,sB;AACA,kB;AACA,2B;AACA,iB;AACA,oB;AACA,gB;AACA,wC;AACA,Y;AACA,4B;AACA,K;AACA,I;AACA,I;AACA,G;;AAEA,gD;AACA,2B;AACA,oD;AACA,4E;;AAEA,kC;AACA,4D;;AAEA,W;AACA,wB;AACA,8C;;AAEA,E;AACA,G","sourcesContent":["filteredUserQuery = function(userId, filter) {\n\t// if not an admin user don't show any other user\n\tif (!Roles.userIsInRole(userId, ['admin']))\n\t\treturn Meteor.users.find(userId);\n\n\t// TODO: configurable limit and paginiation\n\tvar queryLimit = 25;\n\n\tif(!!filter) {\n\t\t// TODO: passing to regex directly could be dangerous\n\t\tusers = Meteor.users.find({\n\t\t\t$or: [\n\t\t\t\t{'profile.name': {$regex: filter, $options: 'i'}},\n\t\t\t\t{'emails.address': {$regex: filter, $options: 'i'}}\n\t\t\t]\n\t\t}, {sort: {emails: 1}, limit: queryLimit});\n\t} else {\n\t\tusers = Meteor.users.find({}, {sort: {emails: 1}, limit: queryLimit});\n\t}\n\treturn users;\n};","Meteor.startup(function() {\n\t// create an admin role if it doesn't exist\n\tif (Meteor.roles.find({name: 'admin'}).count() < 1 ) {\n\t\tRoles.createRole('admin');\n\t}\n});","Meteor.publish('roles', function (){\n\treturn Meteor.roles.find({});\n});\n\nMeteor.publish('filteredUsers', function(filter) {\n\treturn filteredUserQuery(this.userId, filter);\n});","Meteor.methods({\n\tdeleteUser: function(userId) {\n\t\tvar user = Meteor.user();\n\t\tif (!user || !Roles.userIsInRole(user, ['admin']))\n\t\t\tthrow new Meteor.Error(401, \"You need to be an admin to delete a user.\");\n\n\t\tif (user._id == userId)\n\t\t\tthrow new Meteor.Error(422, 'You can\\'t delete yourself.');\n\t\t\n\t\t// remove the user\n\t\tMeteor.users.remove(userId);\n\t},\n\n\taddUserRole: function(userId, role) {\n\t\tvar user = Meteor.user();\n\t\tif (!user || !Roles.userIsInRole(user, ['admin']))\n\t\t\tthrow new Meteor.Error(401, \"You need to be an admin to update a user.\");\n\n\t\tif (user._id == userId)\n\t\t\tthrow new Meteor.Error(422, 'You can\\'t update yourself.');\n\n\t\t// handle invalid role\n\t\tif (Meteor.roles.find({name: role}).count() < 1 )\n\t\t\tthrow new Meteor.Error(422, 'Role ' + role + ' does not exist.');\n\n\t\t// handle user already has role\n\t\tif (Roles.userIsInRole(userId, role))\n\t\t\tthrow new Meteor.Error(422, 'Account already has the role ' + role);\n\n\t\t// add the user to the role\n\t\tRoles.addUsersToRoles(userId, role);\n\t},\n\n\tremoveUserRole: function(userId, role) {\n\t\tvar user = Meteor.user();\n\t\tif (!user || !Roles.userIsInRole(user, ['admin']))\n\t\t\tthrow new Meteor.Error(401, \"You need to be an admin to update a user.\");\n\n\t\tif (user._id == userId)\n\t\t\tthrow new Meteor.Error(422, 'You can\\'t update yourself.');\n\n\t\t// handle invalid role\n\t\tif (Meteor.roles.find({name: role}).count() < 1 )\n\t\t\tthrow new Meteor.Error(422, 'Role ' + role + ' does not exist.');\n\n\t\t// handle user already has role\n\t\tif (!Roles.userIsInRole(userId, role))\n\t\t\tthrow new Meteor.Error(422, 'Account does not have the role ' + role);\n\n\t\tRoles.removeUsersFromRoles(userId, role);\n\t},\n\n\taddRole: function(role) {\n\t\tvar user = Meteor.user();\n\t\tif (!user || !Roles.userIsInRole(user, ['admin']))\n\t\t\tthrow new Meteor.Error(401, \"You need to be an admin to update a user.\");\n\n\t\t// handle existing role\n\t\tif (Meteor.roles.find({name: role}).count() > 0 )\n\t\t\tthrow new Meteor.Error(422, 'Role ' + role + ' already exists.');\n\n\t\tRoles.createRole(role);\n\t},\n\n\tremoveRole: function(role) {\n\t\tvar user = Meteor.user();\n\t\tif (!user || !Roles.userIsInRole(user, ['admin']))\n\t\t\tthrow new Meteor.Error(401, \"You need to be an admin to update a user.\");\n\n\t\t// handle non-existing role\n\t\tif (Meteor.roles.find({name: role}).count() < 1 )\n\t\t\tthrow new Meteor.Error(422, 'Role ' + role + ' does not exist.');\n\n\t\tif (role === 'admin')\n\t\t\tthrow new Meteor.Error(422, 'Cannot delete role admin');\n\n\t\t// remove the role from all users who currently have the role\n\t\t// if successfull remove the role\n\t\tMeteor.users.update(\n\t\t\t{roles: role },\n\t\t\t{$pull: {roles: role }},\n\t\t\t{multi: true},\n\t\t\tfunction(error) {\n\t\t\t\tif (error) {\n\t\t\t\t\tthrow new Meteor.Error(422, error);\n\t\t\t\t} else {\n\t\t\t\t\tRoles.deleteRole(role);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t},\n\n\tupdateUserInfo: function(id, property, value) {\n\t\tvar user = Meteor.user();\n\t\tif (!user || !Roles.userIsInRole(user, ['admin']))\n\t\t\tthrow new Meteor.Error(401, \"You need to be an admin to update a user.\");\n\n\t\tif (property !== 'profile.name')\n\t\t\tthrow new Meteor.Error(422, \"Only 'name' is supported.\");\n\n\t\tobj = {};\n\t\tobj[property] = value;\n\t\tMeteor.users.update({_id: id}, {$set: obj});\n\n\t}\n});"]}